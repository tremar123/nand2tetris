class Game {
    field Apple apple;
    field Snake snake;
    field int dir; // direction of snake 1 - top, 2 - right, 3 - down, 4 - left

    constructor Game new() {
        let apple = Apple.new();
        let snake = Snake.new();
        let dir = 2;
        return this;
    }

    method void play() {
        var int key;
        var bool colliding, increase, eraseTail;

        let colliding = false;
        let increase = false;
        let eraseTail = true;

        while (~colliding) {
            let key = Keyboard.keyPressed();
            if (key = 130 & ~(dir = 2)) {
                let dir = 4;
            }
            if (key = 131 & ~(dir = 3)) {
                let dir = 1;
            }
            if (key = 132 & ~(dir = 4)) {
                let dir = 2;
            }
            if (key = 133 & ~(dir = 1)) {
                let dir = 3;
            }

            if (snake.getTailX() = apple.getX() & snake.getTailY() = apple.getY()) {
                let eraseTail = false;
            }

            // move snake & check if colliding with self or wall - lost
            let colliding = snake.move(dir, increase, eraseTail);
            let eraseTail = true;
            let increase = false;

            // check if on apple - make snake bigger, spawn next apple
            if (snake.getHeadX() = apple.getX() & snake.getHeadY() = apple.getY()) {
                let increase = true;
                do apple.spawnNext();
            }

            // check if snake lenght equals to board size - win
            if (snake.getSize() = 512) {
                do Output.printString("You won!");
                do Output.println();
                return;
            }

            do Sys.wait(300);
        }

        do Output.printString("You lost!");
        do Output.println();
        return;
    }

    method void dispose() {
        do apple.dispose();
        do snake.dispose();
        do Memory.deAlloc(this);
        return;
    }
}
