// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    /**
        instruction - https://www.nand2tetris.org/_files/ugd/44046b_7ef1c00a714c46768f08c459a6cab45a.pdf
        bit 15 - A or C instruction
        bits 12..6 - comp
        bits 5..3 - dest 
        bits 2..0 - jump
    */

    PARTS:
    Mux16(a=instruction, b=ALUout, sel=destA, out=mux1out);
    ARegister(in=mux1out, load=loadA, out=outA, out[0..14]=addressM);
    Mux16(a=outA, b=inM, sel=instruction[12], out=mux2out);
    PC(in=outA, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
    ALU(x=Dout, y=mux2out, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);
    DRegister(in=ALUout, load=destD, out=Dout);

    // whether to write to A register
    And(a=instruction[15], b=instruction[5], out=destA);
    Not(in=instruction[15], out=isAInst);
    Or(a=destA, b=isAInst, out=loadA);

    // whether to write to D register
    And(a=instruction[15], b=instruction[4], out=destD);

    // whether to write to memory
    And(a=instruction[15], b=instruction[3], out=writeM);

    /**
        only when c instruction
        |      PC load truth table      |
        | j1 | j2 | j3 | zr | ng | load |
        |----|----|----|----|----|------|
        |  0 |  0 |  0 |  0 |  0 |    0 |
        |  0 |  0 |  0 |  0 |  1 |    0 |
        |  0 |  0 |  0 |  1 |  0 |    0 |
        |  0 |  0 |  1 |  0 |  0 |    1 |
        |  0 |  0 |  1 |  0 |  1 |    0 |
        |  0 |  0 |  1 |  1 |  0 |    0 |
        |  0 |  1 |  0 |  0 |  0 |    0 |
        |  0 |  1 |  0 |  0 |  1 |    0 |
        |  0 |  1 |  0 |  1 |  0 |    1 |
        |  0 |  1 |  1 |  0 |  0 |    1 |
        |  0 |  1 |  1 |  0 |  1 |    0 |
        |  0 |  1 |  1 |  1 |  0 |    1 |
        |  1 |  0 |  0 |  0 |  0 |    0 |
        |  1 |  0 |  0 |  0 |  1 |    1 |
        |  1 |  0 |  0 |  1 |  0 |    0 |
        |  1 |  0 |  1 |  0 |  0 |    1 |
        |  1 |  0 |  1 |  0 |  1 |    1 |
        |  1 |  0 |  1 |  1 |  0 |    0 |
        |  1 |  1 |  0 |  0 |  0 |    0 |
        |  1 |  1 |  0 |  0 |  1 |    1 |
        |  1 |  1 |  0 |  1 |  0 |    1 |
        |  1 |  1 |  1 |  0 |  0 |    1 |
        |  1 |  1 |  1 |  0 |  1 |    1 |
        |  1 |  1 |  1 |  1 |  0 |    1 |
    */

    And(a=instruction[2], b=ng, out=jlt);
    And(a=instruction[1], b=zr, out=jeq);
    Or(a=zr, b=ng, out=notPositive);
    Not(in=notPositive, out=positive);
    And(a=instruction[0], b=positive, out=jgt);
    Or(a=jgt, b=jeq, out=jge);
    Or(a=jge, b=jlt, out=jmp);
    And(a=instruction[15], b=jmp, out=loadPC);
}
